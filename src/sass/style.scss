@import "mixin";

//変数スコープ範囲
.section {
  $value: 30px;
  margin-top: $value;
}

.item {
  $value: 20px;
  padding: $value;
  margin: $value;
}

//変数PASS
$IMG_PATH: '/assets/img/';

body {
  background-image: url(#{$IMG_PATH}thumb.jpg);
}


//演算

//引き算
article {
  width: 560px - 14px;
  padding: 7px;
}

//足し算
.example01 {
  width: 500px + 8;
}

//掛け算
.example02 {
  width: 500px * 8;
}

//割り算
.example03 {
  width: (500px/8);
}

//割り算のあまり
.example04 {
  width: 100px % 3;
}

//別単位演算
article {
  width: 300px + 5cm;
}

//変数と演算
$main_width: 560px;

article {
  $padding: 7px;
  width: $main_width - $padding * 2;
  padding: 0 $padding;
}


//extend
.box {
  margin: 0 0 30px;
  padding: 15px;
}

.bd {
  border: 1px solid #ccc;
}

.item {
  @extend .box;
  @extend .bd;
  text-align: center;
}

//extendの連鎖

.att {
  color: red;
  font-weight: bold;
}

.attBox {
  //.attを継承
  @extend .att;
  padding: 15px;
  border: 1px solid red;
}

.notes {
  //.attが継承されている.attBoxを継承（連鎖）
  @extend .attBox;
}

//extend専用のプレースホルダーセレクタ
%boxBase {
  padding: 15px;
  border: 2px solid #ccc;
}

.test01 {
  @extend %boxBase;
  margin-bottom: 20px;
}

.test02 {
  @extend %boxBase;
  margin-bottom: 60px;
}


//mixin

@mixin bodySet {
  padding: 15px;
  background: #999;
  color: #000;
}

.area {
  @include bodySet;
}

.areaTest {
  @include bodySet;
}

//mixin 引数

@mixin kadomaru($value) {
  border-radius: $value;
}

.boxin {
  @include kadomaru(4px);
}

.itemin {
  border: 1px solid #ccc;
  @include kadomaru(5px 10px)
}

//mixin 引数　初期値

@mixin kadomaru01($value: 3px) {
  border-radius: $value;
}

.boxA {
  @include kadomaru01;
}

.boxB {
  @include kadomaru01(4px);
}

//mixin 引数　複数

@mixin boxBase ($margin: 30px 0,$padding: 10px) {
  margin: $margin;
  padding: $padding;
}

.boxA {
  @include boxBase;
}

.boxB {
  @include boxBase( 0 0 50px, 20px);
  background: #ccc;
}

// 「,」を使うプロパティには可変長引数を使用
@mixin shadow($value...) {
  text-shadow: $value;
}

h2 {
  @include shadow(8px 8px 0 #999,15px -10px 0 #eee);
}

//複数の引数があるmixinを読み込む際に可変長引数を使う
@mixin itemBase($w: 350px,$pd:15px,$bg_c: #fff,$bg_c: #ccc) {
  width: $w;
  padding: $pd;
  background-color: $bg_c;
  border: 1px solid $bg_c;
}

$values : 300px,20px,#ccc;

.item {
  display: flex;
  @include itemBase($values...);
}


//at-root
//ネストから出す
.block {
  .element-A {
    width: 80%;
  }
  @at-root .element-B {
    width: 10%;
  }
}

.block {
  width: 50%;
  @media (max-width: 640px) {
    width: 100%;
    @at-root {
      .item {
        margin-bottom: 30px;
      }
    }
  }
}

//at-root(with:...)
.blockA {
  width: 50%;
  @media (max-width: 640px) {
    width: 100%;
    @at-root (with: media) {
      .itemA {
        margin-bottom: 3px;
      }
    }
  }
}

//at-root(without:...)
.blockB {
  width: 50%;
  @media (max-width: 640px) {
    width: 100%;
    @at-root (without: media) {
      .itemB {
        margin-bottom: 30px;
      }
    }
  }
}

//データタイプ
.DataTypes {
  property: type-of(10px);
  property: type-of(10%);
  property: type-of(red);
  property: type-of(sans-serif);
  property: type-of(true);
  property: type-of(null);
  property: type-of(1.5em 1em 0 2em);
  $map:(key1: value1,key2: value2);
  property: type-of($map);

  property: type-of(get-function('lighten'));

}


//データタイプがNumber型のときだけ処理を実行
@function example($value) {
  @if type-of($value) == number {

  }
}

// @if

$generalStyle: true;

@if $generalStyle {
  .fl {
    float: right;
  }
  .fr {
    float: right;
  }
}

//getStyleの値によってstyleを出し分け
$getStyle: 1;

@mixin style {
  @if $getStyle == 1 {
    margin: 0 0 30px;
    padding: 15px;
    background: #eee;
  }
  @else if $getStyle == 2 {
    margin: 0 10px 15px;
    padding: 20px 15px;
    border: 2px solid #333;
  }
  @else {
    margin: 0 0 10px;
  }
}

.box {
  @include style;
}

// @for

//through 1-3回
//（3を含む)
@for $value from 1 through 3 {
  .throughSample_#{$value} {
    margin-bottom: 1px * $value;
  }
}

//to 1-2回
// (3を含まない)
@for $value from 1 to 3 {
  .toSample_#{$value} {
    margin-bottom: 1px * $value;
  }
}

@for $value from 1 through 2 {
  .mt_#{$value * 10} {
    margin-top: 10px * $value;
  }
  .mb_#{$value * 10} {
    margin-bottom: 10px * $value;
  }
}

//@while

$value: 30;

@while $value > 0 {
  .mt_#{$value} {
    margin-top: $value + px;
  }
  .mb_#{$value} {
    margin-bottom: $value + px;
  }
  $value: $value - 5;
}

$value: 300;

@while $value > 200 {
  .box_#{$value} {
    width: 2px * $value;
  }
  $value: $value - 32;
}

//@each
//リスト（配列)に対して繰り返し処理
$nameList: top,about,company,contact;

@each $name in $nameList {
  .body-#{$name} {
    background-image: url(/assets/img/bg_#{$name}.png);
  }
}

